{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\theek\\\\Batch-5\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.js\";\n// src/components/ProtectedRoute.js\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode'; // Changed from import jwtDecode from 'jwt-decode'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  element,\n  roleRequired\n}) => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n  try {\n    const decodedToken = jwtDecode(token);\n    const userRole = decodedToken.role; // Adjust this based on your JWT payload structure\n\n    if (userRole !== roleRequired) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 14\n      }, this);\n    }\n    return element;\n  } catch (error) {\n    console.error('Invalid token', error);\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jwtDecode","jsxDEV","_jsxDEV","ProtectedRoute","element","roleRequired","token","localStorage","getItem","to","fileName","_jsxFileName","lineNumber","columnNumber","decodedToken","userRole","role","error","console","removeItem","_c","$RefreshReg$"],"sources":["C:/Users/theek/Batch-5/frontend/src/components/ProtectedRoute.js"],"sourcesContent":["// src/components/ProtectedRoute.js\r\nimport React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { jwtDecode } from 'jwt-decode'; // Changed from import jwtDecode from 'jwt-decode'\r\n\r\nconst ProtectedRoute = ({ element, roleRequired }) => {\r\n  const token = localStorage.getItem('token');\r\n  \r\n  if (!token) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  try {\r\n    const decodedToken = jwtDecode(token);\r\n    const userRole = decodedToken.role; // Adjust this based on your JWT payload structure\r\n\r\n    if (userRole !== roleRequired) {\r\n      return <Navigate to=\"/login\" />;\r\n    }\r\n\r\n    return element;\r\n  } catch (error) {\r\n    console.error('Invalid token', error);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('role');\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,cAAc,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAa,CAAC,KAAK;EACpD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAI,CAACF,KAAK,EAAE;IACV,oBAAOJ,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;EAEA,IAAI;IACF,MAAMC,YAAY,GAAGd,SAAS,CAACM,KAAK,CAAC;IACrC,MAAMS,QAAQ,GAAGD,YAAY,CAACE,IAAI,CAAC,CAAC;;IAEpC,IAAID,QAAQ,KAAKV,YAAY,EAAE;MAC7B,oBAAOH,OAAA,CAACH,QAAQ;QAACU,EAAE,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACjC;IAEA,OAAOT,OAAO;EAChB,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrCV,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAChCZ,YAAY,CAACY,UAAU,CAAC,MAAM,CAAC;IAC/B,oBAAOjB,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;AACF,CAAC;AAACO,EAAA,GAtBIjB,cAAc;AAwBpB,eAAeA,cAAc;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}